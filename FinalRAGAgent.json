{
  "name": "FinalRAGAgent",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "bucketName": "folder1forquestions",
        "options": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -1000,
        20
      ],
      "id": "ccb96c81-0742-476d-9d62-7794d5b90013",
      "name": "AWS S3",
      "credentials": {
        "aws": {
          "id": "BD4C7kWyz9eFOCnx",
          "name": "AWS Account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Processing xlsx\n\n",
        "height": 260,
        "width": 420
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1080,
        -60
      ],
      "id": "e6019dce-f606-40c9-9827-3bc30782dd01",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "bucketName": "folder1forquestions",
        "fileKey": "={{ $json.Key }}"
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -820,
        20
      ],
      "id": "2b04bdd9-f48a-4367-bba8-86a462e1d971",
      "name": "AWS S31",
      "alwaysOutputData": true,
      "credentials": {
        "aws": {
          "id": "BD4C7kWyz9eFOCnx",
          "name": "AWS Account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "bucketName": "forlder2forpolicies",
        "options": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -1060,
        920
      ],
      "id": "d7654f3b-e0f9-40b4-a44a-9f1c11f6dcbd",
      "name": "AWS S32",
      "credentials": {
        "aws": {
          "id": "BD4C7kWyz9eFOCnx",
          "name": "AWS Account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Processing pdf\n\n\n",
        "height": 260,
        "width": 440
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1100,
        860
      ],
      "id": "dc2eb4a6-56d4-4214-a712-e709cfbb2db9",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "bucketName": "forlder2forpolicies",
        "fileKey": "={{ $json.Key }}",
        "binaryPropertyName": "mypdfdatabinaryfile"
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -840,
        920
      ],
      "id": "583bd29b-89bd-46e5-a906-e61de17dce1d",
      "name": "AWS S33",
      "credentials": {
        "aws": {
          "id": "BD4C7kWyz9eFOCnx",
          "name": "AWS Account"
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -520,
        20
      ],
      "id": "037fe50e-97d4-41b3-8931-eccabab6ba81",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "const items = [];\nfor (const item of $input.all()) {\n  const rowData = item.json;\n  // Combine columns into a single question(text) string\n  const question = Object.values(rowData).join(\" \");\n  items.push({ json: { question } });\n}\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -300,
        20
      ],
      "id": "f7979bcb-76a3-4f7b-80d9-7f28816ccd32",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "## Processing xlsx to pass json array. \n(else pinecone will error out)\n",
        "height": 300,
        "width": 460,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -620,
        -60
      ],
      "id": "c51a4333-58b0-4351-a77e-0db40425b645",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "fieldToSplitOut": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -200,
        920
      ],
      "id": "3d8168c2-e41a-4732-8961-588fae55b7b3",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "mypdfdatabinaryfile",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -580,
        920
      ],
      "id": "7053247d-3f76-4789-b487-2d86579df318",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "forcohere",
          "mode": "list",
          "cachedResultName": "forcohere"
        },
        "embeddingBatchSize": 2000,
        "options": {
          "pineconeNamespace": "evidence"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.1,
      "position": [
        0,
        920
      ],
      "id": "3c258f6d-885c-4ad4-9023-6b783bcc97ca",
      "name": "Pinecone Vector Store3",
      "credentials": {
        "pineconeApi": {
          "id": "v5dG4yXwgjTIiNtP",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [
        -120,
        1140
      ],
      "id": "7c6dbd85-b2e7-4069-b646-ccad2c0ae756",
      "name": "Embeddings Cohere2",
      "credentials": {
        "cohereApi": {
          "id": "zFpwP3dKIDScol6A",
          "name": "CohereApi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        180,
        1180
      ],
      "id": "e7613e0e-18de-43ec-b5a0-2c4746215b10",
      "name": "Default Data Loader2"
    },
    {
      "parameters": {
        "chunkSize": 8000,
        "chunkOverlap": 2000,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        80,
        1380
      ],
      "id": "02401ac2-0c3c-4241-9eda-ff9b3008ac19",
      "name": "Recursive Character Text Splitter2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "76555602-a116-45e7-877b-5d563a92450c",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -400,
        920
      ],
      "id": "0053b37b-b5e3-4af2-87e0-5a1ccf058911",
      "name": "Edit Fields"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1520,
        20
      ],
      "id": "80dfe3e2-a5c9-4edc-b4c2-32eb522908d0",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {
          "topK": 5
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        40,
        320
      ],
      "id": "464d70b5-2d5b-451b-a1a8-8397c2c8e6c2",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "XOTvKr1g5ascB52E",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "faq",
        "toolDescription": "This is your knowledge-base for answering the questions.",
        "pineconeIndex": {
          "__rl": true,
          "value": "forcohere",
          "mode": "list",
          "cachedResultName": "forcohere"
        },
        "topK": 10,
        "options": {
          "pineconeNamespace": "evidence"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.1,
      "position": [
        480,
        340
      ],
      "id": "fa09fbdf-17a1-4b3a-9a26-02853483db5f",
      "name": "Pinecone Vector Store2",
      "credentials": {
        "pineconeApi": {
          "id": "v5dG4yXwgjTIiNtP",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsCohere",
      "typeVersion": 1,
      "position": [
        420,
        540
      ],
      "id": "ca08144c-1cbe-4b2f-a725-33e830564380",
      "name": "Embeddings Cohere",
      "credentials": {
        "cohereApi": {
          "id": "zFpwP3dKIDScol6A",
          "name": "CohereApi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Use the knowledge base to answer the question \n{{ $json.question }}. \nBe concise, helpful and accurate without making up any answers. \n\nDo not reply back or end with a question.\n\nIf answer not found, reply \"Sorry, Answer not found.\"\nDon't add any special characters like ''' etc.\nI expect to see the output in the below format:\nQuestion: {{ $json.question }}\nAnswer: answer text here.\n\n\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        260,
        40
      ],
      "id": "ec38d6cf-4cfe-400d-92e9-9d7c7567de50",
      "name": "RAG Agent",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "## 1. Load PDF Chunks onto Pinecond Vector DB\n\n",
        "height": 800,
        "width": 1660,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1200,
        740
      ],
      "id": "ab68af19-19cb-4f03-ad2f-be271c833c57",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## 2. RAG Agent for Q and A",
        "height": 860,
        "width": 2700,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1200,
        -200
      ],
      "id": "b282c3f9-4866-4aa5-8b2a-92dcaccdc060",
      "name": "Sticky Note4",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -20,
        20
      ],
      "id": "866bc99a-0ea2-4ba8-bd27-3bfb0690be39",
      "name": "Loop Over Questions"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a6c23a4d-764b-488c-8432-5b42e152cb98",
              "name": "QandA",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        40
      ],
      "id": "90af2142-e999-48e9-969b-4177e52b1f45",
      "name": "QandA Collection point"
    },
    {
      "parameters": {
        "fieldToSplitOut": "qaPairs",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1120,
        40
      ],
      "id": "23f4bc73-b5d9-4035-8a1b-420faa6f15c9",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1-fCvTL7v066FGekXmOb3swR_zP43r2GsLGWsyArY_V8",
          "mode": "list",
          "cachedResultName": "n8nQandA_Output",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-fCvTL7v066FGekXmOb3swR_zP43r2GsLGWsyArY_V8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-fCvTL7v066FGekXmOb3swR_zP43r2GsLGWsyArY_V8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Questions": "={{ $json.question }}",
            "Answers": "={{ $json.answer }}"
          },
          "matchingColumns": [
            "Questions"
          ],
          "schema": [
            {
              "id": "Questions",
              "displayName": "Questions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Answers",
              "displayName": "Answers",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1300,
        40
      ],
      "id": "ece0f5cf-429c-4f54-a9e3-02067741ff80",
      "name": "Insert Q&A",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "g1ri76vroRhvDGMt",
          "name": "G-Sheets for QandA Web client 1"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n    // Get input from previous node\n    const input = $json.QandA;\n    if (!input) throw new Error('No input data provided');\n\n    // Split input into lines\n    const lines = input.trim().split('\\n');\n    const qaPairs = [];\n    let currentQuestion = null;\n    let currentAnswer = [];\n    let isAnswer = false;\n\n    // Parse lines\n    for (let line of lines) {\n        line = line.trim();\n        if (line.startsWith('Question:')) {\n            if (currentQuestion) {\n                qaPairs.push({\n                    question: currentQuestion,\n                    answer: currentAnswer.join(' ').trim()\n                });\n            }\n            currentQuestion = line.replace('Question:', '').trim();\n            currentAnswer = [];\n            isAnswer = false;\n        } else if (line.startsWith('Answer:')) {\n            currentAnswer.push(line.replace('Answer:', '').trim());\n            isAnswer = true;\n        } else if (isAnswer && line) {\n            currentAnswer.push(line);\n        }\n    }\n\n    // Push the last Q&A pair\n    if (currentQuestion) {\n        qaPairs.push({\n            question: currentQuestion,\n            answer: currentAnswer.join(' ').trim()\n        });\n    }\n\n    // Format output text\n    const formattedOutput = qaPairs.map(pair => \n        `Question: ${pair.question}\\nAnswer: ${pair.answer}`\n    ).join('\\n\\n');\n\n    // Return formatted output and data for Excel\n    return [{\n        json: {\n            formattedOutput,\n            qaPairs\n        }\n    }];\n\n  \n} catch (error) {\n    throw new Error(`Error processing QandA: ${error.message}`);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        40
      ],
      "id": "cfda1965-fcd3-4df6-9424-0f48066b5891",
      "name": "Formatted Q&A"
    },
    {
      "parameters": {
        "content": "## Processing and saving Q&A on google sheets\n",
        "height": 320,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        900,
        -60
      ],
      "id": "a6e79176-5e50-4fdb-8324-980503d34444",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "## RAG Agent\n",
        "height": 360,
        "width": 940,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -100,
        -80
      ],
      "id": "7e8dcd59-5aba-4ea4-ab91-6d7478446c78",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## 3. Uploading Q and A on S3 Bucket",
        "height": 420,
        "width": 1000
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1200,
        -720
      ],
      "id": "cbe88ab0-c5e8-4b8c-bdfd-3c784a544a8c",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": "n8nQandA_Output",
        "returnAll": true,
        "filter": {
          "whatToSearch": "files",
          "fileTypes": [
            "application/vnd.google-apps.spreadsheet"
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1120,
        -560
      ],
      "id": "abc4ee23-9135-41ae-a7dc-6a9faddebb1a",
      "name": "Search file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "JWaeI5ERwqiupnrj",
          "name": "Google Drive accountQ&Aoutput"
        }
      }
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "folder3forqandaoutput",
        "fileName": "={{ $json.name }}.{{ $binary.data.fileExtension }}",
        "additionalFields": {
          "acl": "publicRead",
          "grantFullControl": false
        },
        "tagsUi": {
          "tagsValues": [
            {
              "key": "Filename",
              "value": "={{ $json.name }}.{{ $binary.data.fileExtension }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -680,
        -560
      ],
      "id": "ebacc910-a3a1-4f41-984a-4fe4fa690772",
      "name": "AWS S34",
      "alwaysOutputData": true,
      "credentials": {
        "aws": {
          "id": "BD4C7kWyz9eFOCnx",
          "name": "AWS Account"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1-fCvTL7v066FGekXmOb3swR_zP43r2GsLGWsyArY_V8",
          "mode": "list",
          "cachedResultName": "n8nQandA_Output",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-fCvTL7v066FGekXmOb3swR_zP43r2GsLGWsyArY_V8/edit?usp=drivesdk"
        },
        "options": {
          "binaryPropertyName": "data",
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "application/pdf",
              "drawingsToFormat": "application/pdf",
              "slidesToFormat": "application/pdf",
              "sheetsToFormat": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
          },
          "fileName": "={{ $json.name }}"
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -900,
        -560
      ],
      "id": "9a71c0cb-d093-4394-9984-1da37d078dce",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "JWaeI5ERwqiupnrj",
          "name": "Google Drive accountQ&Aoutput"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log to the console (visible in execution details)\nconsole.log(\"Upload on S3 Bucket is done!\");\n\n// Optionally add a custom property to the output data\nreturn [{ json: { status: \"done\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        -560
      ],
      "id": "c71cf3bf-dd4c-4522-b665-5910434628c4",
      "name": "Code1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.question }} ",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        240,
        400
      ],
      "id": "0c3d6264-0cf6-4e61-aa2b-ef4e5cb84903",
      "name": "Simple Memory"
    }
  ],
  "pinData": {},
  "connections": {
    "AWS S3": {
      "main": [
        [
          {
            "node": "AWS S31",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS S31": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS S32": {
      "main": [
        [
          {
            "node": "AWS S33",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS S33": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Questions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Cohere2": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader2": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter2": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader2",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "AWS S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store2": {
      "ai_tool": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Cohere": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "RAG Agent": {
      "main": [
        [
          {
            "node": "Loop Over Questions",
            "type": "main",
            "index": 0
          },
          {
            "node": "QandA Collection point",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Questions": {
      "main": [
        [],
        [
          {
            "node": "RAG Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "QandA Collection point": {
      "main": [
        [
          {
            "node": "Formatted Q&A",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Insert Q&A",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Q&A": {
      "main": [
        []
      ]
    },
    "Formatted Q&A": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search file": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "AWS S34",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS S34": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "96556eb5-e3de-459f-a6fc-a5a69b8df66a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "717e8a932fc54d055661b2e2f4968bac223714c5af3b0845c3d31721aa44d0c7"
  },
  "id": "DUVdZHRFyguy6TQh",
  "tags": []
}